// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: output.proto

package output

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OutputService_OutputCCpp_FullMethodName      = "/output.OutputService/outputCCpp"
	OutputService_OutputPython_FullMethodName    = "/output.OutputService/outputPython"
	OutputService_OutputGolangPHP_FullMethodName = "/output.OutputService/outputGolangPHP"
)

// OutputServiceClient is the client API for OutputService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutputServiceClient interface {
	OutputCCpp(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputResponse, error)
	OutputPython(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputResponse, error)
	OutputGolangPHP(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputResponse, error)
}

type outputServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOutputServiceClient(cc grpc.ClientConnInterface) OutputServiceClient {
	return &outputServiceClient{cc}
}

func (c *outputServiceClient) OutputCCpp(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutputResponse)
	err := c.cc.Invoke(ctx, OutputService_OutputCCpp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outputServiceClient) OutputPython(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutputResponse)
	err := c.cc.Invoke(ctx, OutputService_OutputPython_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outputServiceClient) OutputGolangPHP(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutputResponse)
	err := c.cc.Invoke(ctx, OutputService_OutputGolangPHP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutputServiceServer is the server API for OutputService service.
// All implementations must embed UnimplementedOutputServiceServer
// for forward compatibility.
type OutputServiceServer interface {
	OutputCCpp(context.Context, *OutputRequest) (*OutputResponse, error)
	OutputPython(context.Context, *OutputRequest) (*OutputResponse, error)
	OutputGolangPHP(context.Context, *OutputRequest) (*OutputResponse, error)
	mustEmbedUnimplementedOutputServiceServer()
}

// UnimplementedOutputServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOutputServiceServer struct{}

func (UnimplementedOutputServiceServer) OutputCCpp(context.Context, *OutputRequest) (*OutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputCCpp not implemented")
}
func (UnimplementedOutputServiceServer) OutputPython(context.Context, *OutputRequest) (*OutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputPython not implemented")
}
func (UnimplementedOutputServiceServer) OutputGolangPHP(context.Context, *OutputRequest) (*OutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputGolangPHP not implemented")
}
func (UnimplementedOutputServiceServer) mustEmbedUnimplementedOutputServiceServer() {}
func (UnimplementedOutputServiceServer) testEmbeddedByValue()                       {}

// UnsafeOutputServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutputServiceServer will
// result in compilation errors.
type UnsafeOutputServiceServer interface {
	mustEmbedUnimplementedOutputServiceServer()
}

func RegisterOutputServiceServer(s grpc.ServiceRegistrar, srv OutputServiceServer) {
	// If the following call pancis, it indicates UnimplementedOutputServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OutputService_ServiceDesc, srv)
}

func _OutputService_OutputCCpp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutputServiceServer).OutputCCpp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OutputService_OutputCCpp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutputServiceServer).OutputCCpp(ctx, req.(*OutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutputService_OutputPython_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutputServiceServer).OutputPython(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OutputService_OutputPython_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutputServiceServer).OutputPython(ctx, req.(*OutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutputService_OutputGolangPHP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutputServiceServer).OutputGolangPHP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OutputService_OutputGolangPHP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutputServiceServer).OutputGolangPHP(ctx, req.(*OutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OutputService_ServiceDesc is the grpc.ServiceDesc for OutputService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OutputService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "output.OutputService",
	HandlerType: (*OutputServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "outputCCpp",
			Handler:    _OutputService_OutputCCpp_Handler,
		},
		{
			MethodName: "outputPython",
			Handler:    _OutputService_OutputPython_Handler,
		},
		{
			MethodName: "outputGolangPHP",
			Handler:    _OutputService_OutputGolangPHP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "output.proto",
}
